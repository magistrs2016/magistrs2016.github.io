<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=utf-8">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Інформаційні технології</TITLE>
</HEAD>
<BODY>
<DIR>

<B><FONT FACE="Tahoma" SIZE=2><P ALIGN="CENTER">Спеціальність "Інформатика" <BR>
</P></DIR></B>

<OL>

<LI>Поняття програмної інженерії. Моделювання у програмній інженерії.</LI>
<LI>Життєвий цикл програмних систем (ПС). Моделі життєвого циклу ПС. Ітеративно-інкрементні моделі життєвого циклу. Керування ризиками.</LI>
<LI>Візуальне моделювання. Моделювання та <I>CASE</I>-технології. Уніфікована мова моделювання <I>UML</I>. Призначення <I>UML</I> у розрізі проектування ПС. Види діаграм <I>UML</I>. Спрощена стратегія використання <I>UML</I>-діаграм при моделюванні ПС.</LI>
<LI>Засоби розширення <I>UML</I>: стереотипи (<I>stereotype</I>), помічені значення (<I>tagged</I> <I>value</I>), обмеження (<I>constraint</I>). Профілі предметних областей.</LI>
<LI>Діаграми прецедентів. Моделювання контексту та вимог до ПС. Прецеденти. Специфікація прецедентів у <I>Rational</I> <I>Rose</I>. Потоки подій та сценарії.</LI>
<LI>Актори, основні актори. Відношення між акторами та прецедентами. Відношення узагальнення для прецедентів та акторів.</LI>
<LI>Організація прецедентів. Відношення залежності між прецедентами. Відношення включення (<I>include</I>) та розширення (<I>extend</I>). Варіанти діаграм прецедентів.</LI>
<LI>Реалізація прецедентів. Використання діаграм послідовностей. Анатомія діаграм послідовності. Двохетапне розроблення діаграм послідовностей. Узгодженість (цілісність) моделей. Діаграми класів-учасників <I>VOPC</I> (<I>View</I> <I>of</I> <I>Participating</I> <I>Classes</I>) прецедентів. </LI>
<LI>Використання класів при проектуванні ПС. Класи етапу аналізу: прикордонні (<I>boundary</I>) або інтерфейсні класи, класи-сутності (<I>entity</I>), управляючі (<I>control</I>) класи (класи-менеджери). Класи етапу проектування. Діаграми співробітництва (<I>collaboration</I>) та їх використання.</LI>
<LI>Відношення між класами та їх виявлення (узагальнення, залежність, асоціація, агрегація, композиція). Проектування класів, відношень між класами. Проектування атрибутів та операцій. Пакетування класів.</LI>
<LI>Діаграми класів та патерни проектування. Структура патернів. Класифікація патернів: породжуючі, структурні, поведінкові. </LI>
<LI>Приклади патернів: “<I>Singleton</I>”, “<I>Adapter”, </I>“<I>Proxy”, “Decorator</I>”, “<I>Composite</I>”.</LI>
<LI>Використання діаграм класів для кодогенерації. Кодогенерація та реінженіринг. </LI>
<LI>Платформа .<I>NET</I>. Основні складові частини <I>CLI</I>. Середовище виконання .<I>NET</I>. Загальна система типів <I>CTS</I>.</LI>
<LI>Поняття керованого коду. .<I>NET</I>-компіляція. Міжмовна інтеграція у .<I>NET</I>. Метадані. Самоопис керованого коду .<I>NET</I>.</LI>
<LI>Мова <I>CIL</I>. <I>Just</I> <I>In</I> <I>Time</I> (<I>JIT</I>) компіляція.</LI>
<LI>Типи об'єктів для віддаленої взаємодії. Типи <I>marshal</I>-<I>by</I>-<I>value</I>. Серіалізація. Типи <I>marshal</I>-<I>by</I>-<I>reference</I>.</LI>
<LI>Серверна активізація. Режими <I>Singleton</I> та <I>SingleCall</I>. Клієнтська активізація.</LI>
<LI>Канали. Стандартні типи каналів: <I>TcpChannel</I> та <I>HttpChannel</I>. Конфігурування інфраструктури .<I>NET</I> <I>Remoting</I>: програмне; з використанням конфігураційних файлів.</LI>
<LI>Основи управління часом життя об'єктів .<I>NET</I>.</LI>
<LI>Веб-служби (<I>Web Services</I>) <I>SOAP</I> та сервісно-орієнтована архітектура (СОА). Стандарти веб-служб.</LI>
<LI>Документування веб-служб: генерація документації для сприйняття людиною (з використанням веб-браузерів), генерація документації, орієнтованої на використання програмами – <I>wsdl</I>-файли.</LI>
<LI>Розробка веб-служб на платформі .<I>NET</I>. Директива @ <I>WebService</I>. Тест-форми веб-служб.</LI>
<LI>Розробка веб-служб на платформі <I>Java</I>.</LI>
<LI>Розробка клієнтських програм для веб-служб на платформі .<I>NET</I>. Утиліта <I>Wsdl.exe.</I></LI>
<LI>Розробка клієнтських програм для веб-служб на платформі <I>Java</I>.</LI>
<LI>Протокол <I>SOAP. </I>Конверт, заголовок<I> SOAP-</I>повідомлення. Стандарти<I> XML, XML-Schema. </I>Простори імен, монікери<I> XML</I>.</LI>
<LI>Основи архітектури <I>WCF</I>. Кінцеві точки. </LI>
<LI>Прив’язки <I>WCF</I>. Стандартні прив’язки.</LI>
<LI>Метадані <I>WCF</I>-служб.</LI>
<LI><I>WCF. Behavior.</I> Режими інстанціації (<I>instance</I>).</LI>
<LI><I>WCF</I>. <I>DataContract</I>. Сумісність служб <I>ASMX</I> та <I>WCF</I>. </LI>
<LI><I>REST</I> веб-служби. Ідеологія відповідного архітектурного стилю.  <I>JAX-RS (Java API for RESTful Web Services).</I></LI>
<LI><I>REST</I> веб-служби. Приклад проекту із використанням <I>Http Get</I> та <I>Http POST</I>запитів.</LI>
<LI><I>REST</I> веб-служби. Приклади різних репрезентацій для <I>Http Get</I> запитів.</LI>
<LI><I>REST</I> веб-служби. Ієрархічна структура ідентифікації ресурсів. Приклад.</LI>
<LI>Поняття <I>HATEOAS</I>. Модель зрілості <I>REST</I>.</LI>
<LI>Реалізація <I>HATEOAS</I>. Приклад.</LI>



<LI><I>GraphQL</I>. Основні поняття та особливості.</LI>
<LI><I>GraphQL</I> як мова запитів для <I>API</I>. Приклад.</LI>
<LI><I>GraphQL</I>. Мова визначення схем  <I>SDL</I>. Приклади опису даних.</LI>
<LI><I>GraphQL</I>. Мова визначення схем  <I>SDL</I>. Приклади опису запитів та мутацій.</LI>
<LI><I>GraphQL</I> схеми та графи. Рекурсивність запитів.</LI>
<LI><I>GraphQL «resolver»</I>-функції, їх розробка та використання. Приклади.</LI>



<LI>Спрощена архітектура <I>RMI</I>.<I> </I>Особливості програмування <I>RMI/JRMP</I>-проектів.</LI>
<LI>“Віддалені” інтерфейси та класи реалізації “віддалених” інтерфейсів. Порівняння<I> RMI/JRMP</I> та <I>RMI/IIOP</I>. “Експортування” об'єктів. </LI>
<LI><I>JNDI </I>та <I>JRMP</I> – <I>IIOP</I> портабельність <I>Java</I> <I>RMI</I>-проектів.</LI>
<LI>Поняття <I>web</I>-проектів. Сервлети Java. Життєвий цикл сервлетів. <I>GenericServlet. HttpServlet.</I></LI>
<LI>Контейнерне управління сервлетами (web-сервери; типи <I>HttpServletRequest, HttpServletResponse</I>; використання декларативних засобів у <I>web</I>-проектах; дескрипторний файл <I>web.xml</I>, анотація @<I>WebServlet</I>.</LI>
<LI>Сервлетні об'єкти, їх особливості та використання (отримання <I>HTTP</I>-сторінок; використання <I>HTTP-get</I> та <I>HTTP-post</I> команд у <I>web</I>-проектах; <I>singleton</I>-властивість сервлетних об'єктів; особливості підтримки клієнтських сесій; класи <I>HttpSession, Cookie; JSESSIONID-cookie</I>).</LI>
<LI> <I>Java Server Pages (JSP)</I>, їх особливості та використання (трансляція у сервлети; виклики <I>JSP</I> із браузера та сервлетів, "перенаправлення" запитів <I>JSP</I>-сторінці; використання <I>MVC</I>-архітектури при <I>web</I>-проектуванні та роль <I>JSP</I> у ній).</LI>
<LI>Основи <I>Action</I>-<I>oriented</I> <I>Frameworks</I>: диспетчерський сервлет, <I>mapping</I>, <I>action</I>-класи.</LI>
<LI>Використання технології <I>action</I>-класів у<I> web-</I>проектуванні. Приклад.</LI>
<LI>Приклади <I>Action</I>-орієнтованих <I>web-</I>фреймворків.</LI>
<LI> ASP.NET</I>-проекти та їх розробка. Використання технології відокремлення коду. Засоби візуального проектування, управляючі елементи (контроли). Валідація даних. </LI>
<LI>Проблеми <I>postback</I>-запитів та можливості збереження стану сторінок. Сховані поля <I>ASP.NET</I>-проектів. Використання <I>ViewState</I> та <I>ControlState. </I>Можливості використання <I>Cookie</I>, <I>Session</I>- та <I>Application</I>-контейнерів.</LI>
<LI>Засоби <I>ASP.NET AJAX Extensions.</I></LI>
<LI>Розробка <I>Android</I>-програм. <I>Android SDK Manager</I>, <I>Virtual Device Manager</I>. Можливості візуального проектування. Активності (<I>activities</I>) та розмітки (<I>layouts</I>). Віджети. Програмне оперування віджетами. Приклади.</LI>
<LI><I>Android OS</I>.  Управління активностями. Передача даних між активностями. Динамічне наповнення активностей віджетами. Приклади.</LI>
</OL>
</FONT></BODY>
</HTML>
