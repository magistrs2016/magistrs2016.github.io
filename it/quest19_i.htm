﻿<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=utf-8">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Інформаційні технології</TITLE>
</HEAD>
<BODY>
<DIR>

<B><FONT FACE="Tahoma" SIZE=2><P ALIGN="CENTER">Спеціальність "Інформатика" <BR>
</P></DIR></B>

<OL>

<LI>Поняття програмної інженерії. Моделювання у програмній інженерії. Ітеративно-інкрементні моделі життєвого циклу та керування ризиками.</LI>

<LI>Уніфікована мова моделювання <I>UML</I>. Види діаграм <I>UML</I>. Спрощена стратегія використання <I>UML</I>-діаграм при моделюванні програмних систем (ПС). Засоби розширення <I>UML</I>: стереотипи (<I>stereotype</I>), помічені значення (<I>tagged</I> <I>value</I>), обмеження (<I>constraint</I>). Профілі предметних областей.</LI>

<LI>Діаграми прецедентів. Моделювання контексту та вимог до ПС. Прецеденти, потоки подій та сценарії. Актори, основні актори. Відношення між акторами та прецедентами. Відношення узагальнення для прецедентів та акторів. Організація прецедентів, відношення включення (<I>include</I>) та розширення (<I>extend</I>). Варіанти діаграм прецедентів.</LI>

<LI>Реалізація прецедентів із використанням діаграм послідовностей та діаграм співробітництва (<I>collaboration</I>). Анатомія діаграм послідовності. Двохетапна розробка діаграм послідовностей та узгодженість (цілісність) моделей. Діаграми класів-учасників <I>VOPC</I> (<I>View</I> <I>of</I> <I>Participating</I> <I>Classes</I>) прецедентів. </LI>

<LI>Використання класів при проектуванні ПС. Класи етапу аналізу: прикордонні (<I>boundary</I>) або інтерфейсні класи, класи-сутності (<I>entity</I>), управляючі (<I>control</I>) класи (класи-менеджери). Класи етапу проектування. Відношення між класами та їх виявлення (узагальнення, залежність, асоціація, агрегація, композиція).</LI>

<LI>Діаграми класів та патерни проектування. Структура патернів. Класифікація патернів: породжуючі, структурні, поведінкові. Приклади патернів: “<I>Singleton</I>”, “<I>Adapter”, </I>“<I>Proxy”, “Decorator</I>”. Використання діаграм класів для кодогенерації. Кодогенерація та реінженіринг. </LI>

<LI>Типи об'єктів для віддаленої взаємодії .<I>NET Remoting</I>. Серіалізація. Тип <I>marshal</I>-<I>by</I>-<I>reference</I>. Серверна активізація, режими <I>Singleton</I> та <I>SingleCall</I>. Клієнтська активізація.</LI>

<LI> Конфігурування інфраструктури .<I>NET</I> <I>Remoting</I>: програмне та із використанням конфігураційних файлів. Основи управління часом життя об'єктів .<I>NET</I>.</LI>

<LI>Веб-служби (<I>Web Services</I>) <I>SOAP</I> та сервісно-орієнтована архітектура (СОА). Стандарти веб-служб. Документування веб-служб: генерація документації для сприйняття людиною (із використанням веб-браузерів), генерація документації, орієнтованої на використання програмами – <I>wsdl</I>-файли. </I>Конверт, заголовок<I> SOAP-</I>повідомлення. Стандарти<I> XML, XML-Schema. </I>Простори імен, монікери<I> XML</I>.</LI>

<LI>Розробка веб-служб на платформі .<I>NET</I>. Приклад. Тест-форми веб-служб.</LI>

<LI>Розробка веб-служб на платформі <I>Java</I> Приклад.</LI>

<LI>Розробка клієнтських програм для веб-служб на платформі .<I>NET</I>. Приклад.</LI>

<LI>Розробка клієнтських програм для веб-служб на платформі <I>Java</I>. Приклад.</LI>

<LI>Основи архітектури <I>WCF</I>. Кінцеві точки. Контракти. Прив’язки, стандартні прив’язки. Метадані <I>WCF</I>-служб.</LI>

<LI><I>WCF. <I>DataContract</I>. Behavior.</I> Режими інстанціації (<I>instance</I>). Сумісність служб <I>ASMX</I> та <I>WCF</I>. </LI>

<LI>Ідеологія архітектурного стилю <I>REST</I> веб-служб.  <I>JAX-RS (Java API for RESTful Web Services).</I> Приклад проекту із використанням <I>Http Get</I> та <I>Http POST</I>запитів.</LI>

<LI><I>REST</I> веб-служби. Приклади різних репрезентацій для <I>Http Get</I> запитів.</LI>

<LI><I>REST</I> веб-служби. Використання ієрархічної структури ідентифікації ресурсів. Приклад.</LI>

<LI>Поняття <I>HATEOAS</I>. Модель зрілості <I>REST</I>.</LI>

<LI>Реалізація <I>HATEOAS</I>. Приклад.</LI>

<LI>Технологія <I>GraphQL</I>. Основні поняття та особливості. <I>GraphQL</I> як мова запитів для <I>API</I>. Приклади запитів. </LI>

<LI> <I>GraphQL</I>-схеми<I>SDL</I>. Приклади опису даних, що використовуються в <I>GraphQL</I>-запитах.</LI>

<LI> <I>GraphQL</I>-схеми<I>SDL</I>. Приклади опису запитів та мутацій.</LI>

<LI><I>GraphQL</I> схеми та графи. Приклади. Рекурсивність запитів. Приклади.</LI>

<LI><I>GraphQL «resolver»</I>-функції, їх призначення, розробка та використання. Приклади.</LI>

<LI>Спрощена архітектура <I>RMI</I>.<I> </I>Особливості програмування <I>RMI/JRMP</I>-проектів. “Віддалені” інтерфейси та класи реалізації “віддалених” інтерфейсів. Порівняння<I> RMI/JRMP</I> та <I>RMI/IIOP</I>. “Експортування” об'єктів. </LI>

<LI><I>JNDI </I>та <I>JRMP</I> – <I>IIOP</I> портабельність <I>Java</I> <I>RMI</I>-проектів.</LI>

<LI>Поняття <I>web</I>-проектів. Сервлети Java. Життєвий цикл сервлетів. <I>GenericServlet. HttpServlet.</I></LI>
<LI>Контейнерне управління сервлетами (web-сервери; типи <I>HttpServletRequest, HttpServletResponse</I>; використання декларативних засобів у <I>web</I>-проектах; дескрипторний файл <I>web.xml</I>, анотація @<I>WebServlet</I>.</LI>

<LI>Сервлетні об'єкти, їх особливості та використання (отримання <I>HTTP</I>-сторінок; використання <I>HTTP-get</I> та <I>HTTP-post</I> команд у <I>web</I>-проектах; <I>singleton</I>-властивість сервлетних об'єктів; особливості підтримки клієнтських сесій; класи <I>HttpSession, Cookie; JSESSIONID-cookie</I>).</LI>

<LI> <I>Java Server Pages (JSP)</I>, їх особливості та використання (трансляція у сервлети; виклики <I>JSP</I> із браузера та сервлетів, "перенаправлення" запитів <I>JSP</I>-сторінці; використання <I>MVC</I>-архітектури при <I>web</I>-проектуванні та роль <I>JSP</I> у ній).</LI>

<LI>Основи <I>Action</I>-<I>oriented</I> <I>Frameworks</I>: диспетчерський сервлет, <I>mapping</I>, <I>action</I>-класи. Приклади.</LI>

<LI> <I>ASP.NET</I>-проекти та їх розробка. Використання технології відокремлення коду. Засоби візуального проектування, управляючі елементи (контроли). Валідація даних. </LI>

<LI>Засоби <I>ASP.NET AJAX Extensions.</I></LI>

<LI>Розробка <I>Android</I>-проектів в <I>Android Studio</I>. <I>Android SDK Manager</I>, <I>Virtual Device Manager</I>. </LI>

<LI><I>Android Studio</I>. Можливості візуального проектування. Віджети. Програмне оперування віджетами. Приклади.</LI>

<LI><I>Android Studio</I>. Особливості розробки <I>Android</I>-проектів: використання ресурсних файлів, автоиатична генерація Java-файлів. </LI>

<LI><I>Android Studio</I>. Активності (<I>activities</I>) та розмітки (<I>layouts</I>). Управління активностями. Передача даних між активностями. Динамічне наповнення активностей віджетами. Приклади.</LI>
</OL>
</FONT></BODY>
</HTML>
