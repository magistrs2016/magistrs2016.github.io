<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Інформаційні технології</TITLE>
</HEAD>
<BODY>
<DIR>

<B><FONT FACE="Tahoma" SIZE=2><P ALIGN="CENTER">Спеціальність "Інформатика" <BR>
(освітньо-кваліфікаційний рівень "магістр")</P></DIR>

<OL>

</B><LI>Поняття програмної інженерії. Моделювання у програмній інженерії.</LI>
<LI>Життєвий цикл програмних систем (ПС). Моделі життєвого циклу ПС. Ітеративно-інкрементні моделі життєвого циклу. Керування ризиками.</LI>
<LI>Візуальне моделювання. Моделювання та <I>CASE</I>-технології. Уніфікована мова моделювання <I>UML</I>. Призначення <I>UML</I> у розрізі проектування ПС. Види діаграм <I>UML</I>. Спрощена стратегія використання <I>UML</I>-діаграм при моделюванні ПС.</LI>
<LI>Засоби розширення <I>UML</I>: стереотипи (<I>stereotype</I>), помічені значення (<I>tagged</I> <I>value</I>), обмеження (<I>constraint</I>). Профілі предметних областей.</LI>
<LI>Діаграми прецедентів. Моделювання контексту та вимог до ПС. Прецеденти. Специфікація прецедентів у <I>Rational</I> <I>Rose</I>. Потоки подій та сценарії.</LI>
<LI>Актори, основні актори. Відношення між акторами та прецедентами. Відношення узагальнення для прецедентів та акторів.</LI>
<LI>Організація прецедентів. Відношення залежності між прецедентами. Відношення включення (<I>include</I>) та розширення (<I>extend</I>). Варіанти діаграм прецедентів.</LI>
<LI>Реалізація прецедентів. Використання діаграм послідовностей. Анатомія діаграм послідовності. Двохетапне розроблення діаграм послідовностей. Узгодженість (цілісність) моделей. Діаграми класів-учасників <I>VOPC</I> (<I>View</I> <I>of</I> <I>Participating</I> <I>Classes</I>) прецедентів. </LI>
<LI>Використання класів при проектуванні ПС. Класи етапу аналізу: прикордонні (<I>boundary</I>) або інтерфейсні класи, класи-сутності (<I>entity</I>), управляючі (<I>control</I>) класи (класи-менеджери). Класи етапу проектування. Діаграми співробітництва (<I>collaboration</I>) та їх використання.</LI>
<LI>Відношення між класами та їх виявлення (узагальнення, залежність, асоціація, агрегація, композиція). Проектування класів, відношень між класами. Проектування атрибутів та операцій. Пакетування класів.</LI>
<LI>Діаграми класів та патерни проектування. Структура патернів. Класифікація патернів: породжуючі, структурні, поведінкові. </LI>
<LI>Приклади патернів: “<I>Singleton</I>”, “<I>Adapter”, </I>“<I>Proxy”, “Decorator</I>”, “<I>Composite</I>”, “<I>Bridge</I>”, “<I>Observer</I>”.</LI>
<LI>Патерн <I>IOC</I>&amp;<I>DI</I>. Ілюстративний приклад.</LI>
<LI>Патерн <I>IOC</I>&amp;<I>DI</I>. <I>Spring</I>: <I>IoC</I> + декларативний стиль.</LI>
<LI>Використання діаграм класів для кодогенерації. Кодогенерація та реінженіринг. </LI>
<LI>Основи <I>COM</I>-технології (ідеологія <I>COM</I>, інтерфейси <I>COM</I>, особливості <I>COM</I>-технології, практичне використання <I>COM</I>-серверів).</LI>
<LI>Стандартні угоди в <I>COM</I>. Угода про підтримку вказівників на інтерфейси. Угоди щодо реалізації викликів процедур (функцій) <I>COM</I>-інтерфейсів (очищення стеку, передача параметрів. Угода про тип інтерфейсних методів. Безпечні виклики (<I>safecall</I>). Тип <I>HRESULT</I>.</LI>
<LI>Інтерфейс <I>IUnknown</I>. <I>QueryInterface</I> та підтримка версій незалежних розробників (принцип незмінності інтерфейсів). Методи <I>AddRef</I>, <I>Release</I>. Підрахунки посилань на <I>COM</I>-об’єкти. </LI>
<LI>Класифікація <I>COM</I>-серверів: внутрішній сервер (<I>in</I>-<I>process</I> <I>server</I>), зовнішній або локальний сервер (<I>out</I>-<I>of</I>-<I>process</I> <I>server</I> або <I>local</I> <I>server</I>), віддалений сервер (<I>remote</I> <I>server</I>).</LI>
<LI>Класифікація зв'язувань з сервером автоматизації: пізнє (з використанням змінних типу <I>variant</I>), раннє (<I>interface</I>-зв'язування), <I>dispinterface</I>-зв'язування. Класифікація інтерфейсів <I>COM</I>-серверів: дуальні, <I>IDispatch</I>-інтерфейси, <I>IUnknown</I>-інтерфейси.</LI>
<LI>Платформа .<I>NET</I>. Основні складові частини <I>CLI</I>. Середовище виконання .<I>NET</I>. Загальна система типів <I>CTS</I>.</LI>
<LI>Поняття керованого коду. .<I>NET</I>-компіляція. Міжмовна інтеграція у .<I>NET</I>.</LI>
<LI>Метадані. Самоопис керованого коду .<I>NET</I>. Механізм рефлексії.</LI>
<LI>Мова <I>CIL</I>. <I>Just</I> <I>In</I> <I>Time</I> (<I>JIT</I>) компіляція.</LI>
<LI>Платформа .<I>NET</I>. Збірки .<I>NET</I>.</LI>
<LI>Платформа .<I>NET</I>. Управління пам'яттю. Збирання сміття.</LI>
<LI>Типи об'єктів для віддаленої взаємодії. Домени. Типи <I>marshal</I>-<I>by</I>-<I>value</I>. Серіалізація. Типи <I>marshal</I>-<I>by</I>-<I>reference</I>.</LI>
<LI>Серверна активізація. Режими <I>Singleton</I> та <I>SingleCall</I>. Клієнтська активізація.</LI>
<LI>Канали. Стандартні типи каналів: <I>TcpChannel</I> та <I>HttpChannel</I>. Конфігурування інфраструктури .<I>NET</I> <I>Remoting</I>: програмне; з використанням конфігураційних файлів.</LI>
<LI>Основи управління часом життя об'єктів .<I>NET</I>.</LI>
<LI>Веб-служби (<I>Web Services</I>) та сервісно-орієнтована архітектура (СОА). Стандарти веб-служб.</LI>
<LI>Документування веб-служб: генерація документації для сприйняття людиною (з використанням веб-браузерів), генерація документації, орієнтованої на використання програмами – <I>wsdl</I>-файли.</LI>
<LI>Розробка веб-служб на платформі .<I>NET</I>. Директива @ <I>WebService</I>. Тест-форми веб-служб. Утиліта <I>.NET WebService Studio </I>як універсальний клієнт.</LI>
<LI>Розробка веб-служб на платформі <I>Java</I>.</LI>
<LI>Розробка клієнтських програм для веб-служб на платформі .<I>NET</I>. Утиліта <I>Wsdl.exe. </LI>
</I><LI>Розробка клієнтських програм для веб-служб на платформі <I>Java</I>.</LI>
<LI>Протокол <I>SOAP. </I>Конверт, заголовок<I> SOAP-</I>повідомлення.</LI>
<LI>Стандарти<I> XML, XML-Schema. </I>Простори імен, монікери<I> XML.</LI>
</I><LI>Структура <I>wsdl</I>-файлів. Оркестровка <I>Web</I>-сервісів. <I>BPEL</I> (<I>BPEL4WS </I>– <I>Business Process Execution Language for Web Services</I>). Візуальне проектування <I>BPEL</I>-програм.</LI>
<LI>Основи архітектури <I>WCF</I>. Кінцеві точки. </LI>
<LI>Прив’язки <I>WCF</I>. Стандартні прив’язки.</LI>
<LI>Метадані <I>WCF</I>-служб.</LI>
<I><LI>WCF. Behavior.</I> Режими інстанціації (<I>instance</I>).</LI>
<I><LI>WCF</I>. Підтримка асинхронних викликів. Використання транзакцій.</LI>
<I><LI>WCF</I>. <I>DataContract</I>. </LI>
<LI>Сумісність служб <I>ASMX</I> та <I>WCF</I>. </LI>
<I><LI>CORBA</I> (призначення, стратегічна мета). <I>CORBA</I> як технологія. Два аспекти: архітектура та стандарти (специфікації). Архітектура <I>OMA</I>. Концепції. Категорії об'єктів <I>OMA</I>.</LI>
<LI>Стандарти (специфікації) <I>CORBA</I>. Брокер об'єктних запитів. Об'єктні типи, <I>IDL</I>-транслятори, <I>proxy</I>-об'єкти.</LI>
<LI>Взаємодії клієнт-сервер у <I>CORBA</I>. “Статична” <I>CORBA</I>. Установлення зв'язку між клієнтом і серверним <I>CORBA</I>-об'єктом. Стандартні засоби встановлення зв'язку. Використання <I>Stringified</I> <I>IOR</I>.</LI>
<LI>Створення <I>CORBA</I>-об'єктів. <I>Interoperable</I> <I>Object</I> <I>Reference</I> (<I>IOR</I>). <I>CORBA</I>-об'єкти, серванти та їх життєві цикли. Об'єктні адаптери. Основні функції <I>POA</I> (<I>Portable</I> <I>Object</I> <I>Adapter</I>). Політики <I>POA</I>. Створення та активізація <I>CORBA</I>-об'єктів. </LI>
<LI>Принципи використання служби іменування (<I>Naming</I> <I>Service</I>). Контексти іменування (простори імен) та іменовані об'єкти. <I>Interoperable</I> <I>Naming</I> <I>Service</I>.</LI>
<LI>Спрощена архітектура <I>RMI</I>.<I> </I>Особливості програмування <I>RMI/JRMP</I>-проектів.</LI>
<LI>“Віддалені” інтерфейси та класи реалізації “віддалених” інтерфейсів. Порівняння<I> RMI/JRMP</I> та <I>RMI/IIOP</I>. “Експортування” об'єктів. Статичний метод <I>ExportObject.</LI>
<LI>RMI/IIOP</I>-проекти. Використання <I>rmic </I>та<I> orbd</I>.</LI>
<I><LI>JNDI </I>та<I> </I>конкретні служби іменування. Особливості налаштування <I>JNDI.</LI>
</I><LI>(<I>JRMP</I> – <I>IIOP</I>) портабельність <I>Java</I> <I>RMI</I>-проектів.</LI>
<I><LI>J2EE</I>. Підтримка <I>CORBA. </I>Технологія <I>Java IDL. </LI>
</I><LI>Сумісність <I>RMI/IIOP</I>- та <I>CORBA</I>-проектів.</LI>
<LI>Cервлети. Сценарій використання сервлетів. </LI>
<I><LI>Web</I>-технологія <I>JSP</I>. Основні підходи до реалізації <I>Web</I>-проектів на основі <I>JSP</I>. Патерн <I>Model</I>-<I>View</I>-<I>Controller </I>у<I> web-</I>проектуванні.</LI>
<LI>Основи <I>Action</I>-<I>oriented</I> <I>Frameworks</I>: диспетчерський сервлет, <I>mapping</I>; <I>action</I>-класи.</LI>
<LI>Використання технології <I>action</I>-класів у<I> web-</I>проектуванні. Приклад.</LI>
<I><LI>Struts,</I> <I>WebWork,</I> <I>Spring</I> як приклади <I>Action</I>-орієнтованих фреймворків.</LI>
<I><LI> ASP.NET</I>-проекти. Життєвий цикл сторінок.</LI>
<LI>Структура <I>ASP.NET</I>-проектів та їх розробка. Використання технології відокремлення коду. Засоби візуального проектування, управляючі елементи (контроли). Валідація даних. </LI>
<LI>Проблеми <I>postback</I>-запитів та можливості збереження стану сторінок. Сховані поля <I>ASP.NET</I>-проектів. Використання <I>ViewState</I> та <I>ControlState. </I>Можливості використання <I>Cookie</I>, <I>Session</I>- та <I>Application</I>-контейнерів.</LI>
<I><LI> </I>Знайомство з <I>AJAX </I>на модельному проекті електронного магазину.</LI>
<LI>Засоби <I>ASP.NET AJAX Extensions.</LI>
<LI>Приклад Java</I>-проекту з <I>AJAX </I>на основі <I>JSP</I> та  сервлетів.</LI>
<LI>Фреймворк <I>Google Web Toolkit</I> (<I>GWT</I>). </LI>
<I><LI>AJAX</I>-проекти із використанням <I>GWT</I>.</LI>
<LI>Розробка <I>Android</I>-програм<I>. Android Developer Tools</I>, <I>Android SDK Manager</I>, <I>Virtual Device Manager</I>. Архітектура <I>Android OS</I>. Розробка клієнтів веб-служб на платформі <I>Android</I>.</LI>
<LI>Можливості візуального проектування програм під <I>Android OS</I>. Активності (<I>activities</I>) та розмітки (<I>layouts</I>). Віджети. Програмне оперування віджетами. Приклад.</LI>
<I><LI>Android OS</I>.  Управління активностями. Передача даних в іншу активність. Динамічне наповнення активності віджетами. Приклад.</LI>
<LI>Хмарні обчислення. Класифікація хмарних сервісів (<I>Platform as a Service, Infrastructure as a Service, Software as a Service</I>). Платформа<I> Microsoft Azure. </I>Проект <I>Google App Engine. </LI>
</I><LI>Розгортання веб-проектів у хмарі (на прикладі).</LI></OL>
</FONT></BODY>
</HTML>
